// Code generated by goa v3.2.3, DO NOT EDIT.
//
// api endpoints
//
// Command:
// $ goa gen github.com/sm43/oauth/api/design

package api

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "api" service endpoints.
type Endpoints struct {
	Authenticate goa.Endpoint
	Details      goa.Endpoint
}

// NewEndpoints wraps the methods of the "api" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		Authenticate: NewAuthenticateEndpoint(s),
		Details:      NewDetailsEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "api" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Authenticate = m(e.Authenticate)
	e.Details = m(e.Details)
}

// NewAuthenticateEndpoint returns an endpoint function that calls the method
// "Authenticate" of service "api".
func NewAuthenticateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AuthenticatePayload)
		return s.Authenticate(ctx, p)
	}
}

// NewDetailsEndpoint returns an endpoint function that calls the method
// "Details" of service "api".
func NewDetailsEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DetailsPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.Details(ctx, p)
	}
}
