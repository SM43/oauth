// Code generated by goa v3.2.3, DO NOT EDIT.
//
// api service
//
// Command:
// $ goa gen github.com/sm43/oauth/api/design

package api

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// The api service exposes endpoint to authenticate User against GitHub OAuth
// and get user details
type Service interface {
	// Authenticates users against GitHub OAuth
	Authenticate(context.Context, *AuthenticatePayload) (res *AuthenticateResult, err error)
	// Find user details
	Details(context.Context, *DetailsPayload) (res *User, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "api"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"Authenticate", "Details"}

// AuthenticatePayload is the payload type of the api service Authenticate
// method.
type AuthenticatePayload struct {
	// OAuth Authorization code of User
	Code string
}

// AuthenticateResult is the result type of the api service Authenticate method.
type AuthenticateResult struct {
	// JWT
	Token string
}

// DetailsPayload is the payload type of the api service Details method.
type DetailsPayload struct {
	// JWT
	Token string
}

// User is the result type of the api service Details method.
type User struct {
	// ID is the unique id of User
	ID uint
	// Name of User
	Name string
	// GitHub ID
	GithubID string
}

// MakeInvalidCode builds a goa.ServiceError from an error.
func MakeInvalidCode(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "invalid-code",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInvalidToken builds a goa.ServiceError from an error.
func MakeInvalidToken(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "invalid-token",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInternalError builds a goa.ServiceError from an error.
func MakeInternalError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "internal-error",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}
